# Сортировка выбором
# Сортировка выбором улучшает пузырьковую сортировку, совершая всего один обмен за каждый проход по списку. Для этого
# алгоритм ищет максимальный элемент и помещает его на соответствующую позицию. Как и для пузырьковой сортировки,
# после первого прохода самый большой элемент находится на правильном месте. После второго прохода на своё место
# становится следующий максимальный элемент. Проходы по списку повторяются n-1n−1 раз, где nn – длина списка,
# поскольку последний из них автоматически оказывается на своем месте.
#
# Алгоритм сортировки выбором также считается учебным и практически не применяется вне учебной литературы. На практике
# используют более эффективные алгоритмы.
#
# Рассмотрим работу алгоритма на примере сортировки списка a = [5, 1, 8, 2, 4] по возрастанию.
# Первый проход:
# Находим максимальный элемент 8 в неотсортированной части списка и меняем его с последним элементом списка:
# [5, 1, 4, 2, 8].
# Второй проход:
# Находим максимальный элемент 5 в неотсортированной части списка и меняем его с предпоследним элементом списка:
# [2, 1, 4, 5, 8].
# Третий проход:
# Находим максимальный элемент 4 в неотсортированной части списка и меняем его с пред-предпоследним элементом списка:
# [2, 1, 4, 5, 8].
# Четвертый проход:
# Находим максимальный элемент 2 в неотсортированной части списка и меняем его с вторым элементом списка:
# [1, 2, 4, 5, 8].
# Теперь список отсортирован и алгоритм может быть завершен.
#
#     Вместо максимального элемента можно искать минимальный.

# Отсортируйте список по возрастанию, реализовав алгоритм сортировки выбором.

a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41,
     -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80,
     27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35,
     -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]

n = len(a)
sr = []
while len(a) > 0:
    position = a.index(min(a))
    sr.append(a[position])
    del a[position]
a = sr
print(a)

# 1) Создаем новый пустой список
# 2)Пишем: пока первый список не станет пустым:
# 3) Находим с помощью функции мин минимальную цифру и добавляем ее в новый список с помощью аппенда
# 4)далее находим индекс этой цифры и удаляем ее из первого списка с помощью дел
# 5) И так как аппенд добавляет в конец списка, то у нас будет браться из первого минимальная и добавляться во второй.
# Так и получим отсортированный список