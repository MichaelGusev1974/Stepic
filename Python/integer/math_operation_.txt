# Дополнительные операции

Мы познакомились с 44 основными математическими операциями в языке Python: сложение (+), вычитание (-), умножение (*)
и деление (/). Добавив ещё 3 операции, мы получим инструментарий, достаточный для написания 99% программ.

Оператор	Описание
**	Возведение в степень
%	Остаток от деления
//	Целочисленное деление
Возведение в степень
Оператор возведения в степень a ** n возводит число a в степень n. Рассмотрим работу данного оператора на примерах:

print(2 ** 0)
print(2 ** 1)
print(2 ** 2)
print(2 ** 3)
print(2 ** (-1))
Результатом выполнения такой программы будет:

1
2
4
8
0.5
Обратите внимание: оператор возведения в степень ** может возводить не только в положительную степень, но и в отрицательную.
Аналогично, основание степени aa также может быть числом отрицательным.

Запомни: в отличие от многих языков программирования, в языке Python для возведения в степень используется оператор **,
а не ^.

Обратите внимание: оператор возведения в степень (**) является правоассоциативным (значение выражения вычисляется справа налево)
в соответствии с правилами математики. Таким образом, выражение x ** y ** z вычисляется как x ** (y ** z).

Результатом работы следующей программы:

print(2 ** 2 ** 3)     # 2 ** (2 ** 3) = 2 ** 8
будет:

256



Целочисленное деление

Для положительных чисел оператор целочисленного деления ведёт себя как обычное деление, за исключением того, что он
отбрасывает десятичную часть результата. Рассмотрим работу данного оператора на примерах:

print(10 // 3)
print(10 // 4)
print(10 // 5)
print(10 // 6)
print(10 // 12)
Результатом выполнения такой программы будет:

3
2
2
1
0
При делении отрицательных чисел необходимо помнить, что результат целочисленного деления не превосходит частное.
Другими словами, округление берётся в меньшую сторону (число -4 меньше, чем число -3).

Результатом работы следующей программы:

print(10 // 3)
print(-10 // 3)
будут числа:

3   # округление в меньшую сторону
-4  # округление в меньшую сторону



Деление с остатком

Оператор деления с остатком возвращает остаток от деления двух целых чисел. Рассмотрим работу данного оператора на примерах:

print(10 % 3)
print(10 % 4)
print(10 % 5)
print(10 % 6)
print(10 % 12)
print(10 % 20)
Результатом выполнения такой программы будет:

1
2
0
4
10
10
Запомни: при нахождении остатка от деления на целое число n может получаться результат 0,1,2,…n −1. Например, при
делении на 2 возможны остатки 0,1, при делении на 3 возможны остатки 0,1,2 и т.д.

Примечания
Примечание 1. Оператор нахождения остатка очень полезен при решении многих задач. Например, число делится на n нацело
тогда и только тогда, когда остаток от деления на n равен 0.

Примечание 2. Операторы // и % имеют такой же приоритет, как и операторы умножения и обычного деления.

Примечание 3. Наивысший приоритет имеет оператор возведения в степень **.

Примечание 4. Полезно прочитать про модулярную арифметику в математике.

Примечание 5. Обратите внимание: результатом деления n % m при n < m является число n. Например, 5 % 9 = 5, 3 % 13 = 3 и т.д.